# .github/workflows/deploy-functions-frontend.yml
name: Build and deploy React app to Azure Web App - Frontend

on:
  push:
    branches:
      - main
    paths: 
      - 'functions/frontend-functions-ts/**'
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: 'app-devinsights-frontend'
  AZURE_WEBAPP_PACKAGE_PATH: 'functions/frontend-functions-ts'
  NODE_VERSION: '18.x'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: '${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/package.json'

      - name: Install dependencies and build React app
        run: |
          cd ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
          npm install
          npm run build
        env:
          REACT_APP_BACKEND_URL: 'https://api.devinsights.site'
          CI: false

      - name: Create deployment package
        run: |
          cd ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}
          
          # Create package.json for production with serve (at root level)
          cat > package.json << 'EOF'
          {
            "name": "devinsights-frontend",
            "version": "1.0.0",
            "scripts": {
              "start": "serve -s build -p 8080"
            },
            "dependencies": {
              "serve": "^14.2.1"
            },
            "engines": {
              "node": "18.x"
            }
          }
          EOF
          
          # Create .deployment file to prevent Azure from trying to build
          cat > .deployment << 'EOF'
          [config]
          SCM_DO_BUILD_DURING_DEPLOYMENT=false
          EOF
          
          # Create a simple startup script (optional, as npm start should work)
          cat > startup.sh << 'EOF'
          #!/bin/bash
          cd /home/site/wwwroot
          npm start
          EOF
          chmod +x startup.sh
          
          # Zip everything including the build folder
          zip -r release.zip build package.json .deployment startup.sh -x "*.git*" "node_modules/*" ".env*" "src/*" "public/*"
          
          echo "âœ… Deployment package created successfully"
          ls -la release.zip
          
          # Show what's in the zip for debugging
          echo "Contents of release.zip:"
          unzip -l release.zip

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/release.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'functions'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      contents: read

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app

      - name: 'Deploy to Azure Web App'
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          slot-name: 'Production'
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: release.zip

      - name: 'Test deployment'
        run: |
          echo "Waiting for deployment to complete..."
          sleep 45
          
          # Test custom domain if configured
          curl -f "https://devinsights.site" || echo "Custom domain test failed (may not be configured yet)"
          
          echo "âœ… Frontend deployment completed"